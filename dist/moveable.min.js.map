{"version":3,"file":"moveable.min.js","sources":["../src/InnerMoveable.tsx","../src/Moveable.tsx"],"sourcesContent":["import { Component, h } from \"preact\";\nimport Moveable, { MoveableProps, MoveableInterface } from \"preact-moveable\";\nimport { ref } from \"framework-utils\";\n\nexport default class InnerMoveable extends Component<MoveableProps> {\n    public state: MoveableProps = {};\n    public preactMoveable: MoveableInterface;\n    constructor(props: MoveableProps) {\n        super(props);\n        this.state = this.props;\n    }\n    public render() {\n        return <Moveable ref={ref(this, \"preactMoveable\")} {...this.state} />;\n    }\n}\n","import EgComponent from \"@egjs/component\";\nimport { ref } from \"framework-utils\";\nimport { h, render } from \"preact\";\nimport InnerMoveable from \"./InnerMoveable\";\nimport { MoveableOptions } from \"./types\";\nimport {\n    OnDragStart, OnDrag, OnResize, OnResizeStart,\n    OnResizeEnd, OnScaleStart, OnScaleEnd, OnRotateStart,\n    OnRotateEnd, OnDragEnd, OnRotate, OnScale, OnWarpStart, OnWarpEnd, OnWarp, OnPinchStart, OnPinch, OnPinchEnd,\n} from \"react-moveable/declaration/types\";\n\n/**\n * Moveable is Draggable! Resizable! Scalable! Rotatable!\n * @sort 1\n * @extends eg.Component\n */\nclass Moveable extends EgComponent {\n    private innerMoveable!: InnerMoveable;\n\n    /**\n     *\n     */\n    constructor(parentElement: HTMLElement | SVGElement, options: MoveableOptions = {}) {\n        super();\n        const element = document.createElement(\"div\");\n        const nextOptions = { container: parentElement, ...options };\n\n        render(\n            <InnerMoveable\n                ref={ref(this, \"innerMoveable\")}\n                {...nextOptions}\n                onDragStart={this.onDragStart}\n                onDrag={this.onDrag}\n                onDragEnd={this.onDragEnd}\n                onResizeStart={this.onResizeStart}\n                onResize={this.onResize}\n                onResizeEnd={this.onResizeEnd}\n                onScaleStart={this.onScaleStart}\n                onScale={this.onScale}\n                onScaleEnd={this.onScaleEnd}\n                onRotateStart={this.onRotateStart}\n                onRotate={this.onRotate}\n                onRotateEnd={this.onRotateEnd}\n                onWarpStart={this.onWarpStart}\n                onWarp={this.onWarp}\n                onWarpEnd={this.onWarpEnd}\n                onPinchStart={this.onPinchStart}\n                onPinch={this.onPinch}\n                onPinchEnd={this.onPinchEnd}\n            />,\n            element,\n        );\n        parentElement.appendChild(element.children[0]);\n    }\n    /**\n     * Whether or not the origin controlbox will be visible or not\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.origin = true;\n     */\n    get origin() {\n        return this.getMoveableProps().origin;\n    }\n    set origin(origin: boolean) {\n        this.innerMoveable.setState({\n            origin,\n        });\n    }\n    /**\n     * The target to indicate Moveable Control Box.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     * moveable.target = document.querySelector(\".target\");\n     */\n    get target(): HTMLElement | SVGElement {\n        return this.getMoveableProps().target;\n    }\n    set target(target: HTMLElement | SVGElement) {\n        if (target !== this.target) {\n            this.innerMoveable.setState({\n                target,\n            });\n        } else {\n            this.updateRect();\n        }\n    }\n    /**\n     * Whether or not target can be dragged.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.draggable = true;\n     */\n    get draggable(): boolean {\n        return this.getMoveableProps().draggable || false;\n    }\n    set draggable(draggable: boolean) {\n        this.innerMoveable.setState({\n            draggable,\n        });\n    }\n    /**\n     * Whether or not target can be resized.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.resizable = true;\n     */\n    get resizable(): boolean {\n        return this.getMoveableProps().resizable;\n    }\n    set resizable(resizable: boolean) {\n        this.innerMoveable.setState({\n            resizable,\n        });\n    }\n    /**\n     * Whether or not target can scaled.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.scalable = true;\n     */\n    get scalable(): boolean {\n        return this.getMoveableProps().scalable;\n    }\n    set scalable(scalable: boolean) {\n        this.innerMoveable.setState({\n            scalable,\n        });\n    }\n    /**\n     * Whether or not target can be rotated.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.rotatable = true;\n     */\n    get rotatable(): boolean {\n        return this.getMoveableProps().rotatable;\n    }\n    set rotatable(rotatable: boolean) {\n        this.innerMoveable.setState({\n            rotatable,\n        });\n    }\n    /**\n     * Whether or not target can be warped.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.warpable = true;\n     */\n    get warpable(): boolean {\n        return this.getMoveableProps().warpable;\n    }\n    set warpable(warpable: boolean) {\n        this.innerMoveable.setState({\n            warpable,\n        });\n    }\n    /**\n     * Whether or not target can be pinched with draggable, resizable, scalable, rotatable\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.pinchable = true;\n     */\n    get pinchable(): boolean | Array<\"rotatable\" | \"scalable\" | \"resizable\"> {\n        return this.getMoveableProps().pinchable;\n    }\n    set pinchable(pinchable: boolean | Array<\"rotatable\" | \"scalable\" | \"resizable\">) {\n        this.innerMoveable.setState({\n            pinchable,\n        });\n    }\n    /**\n     * When resize or scale, keeps a ratio of the width, height.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.keepRatio = true;\n     */\n    get keepRatio(): boolean {\n        return this.getMoveable().props.keepRatio;\n    }\n    set keepRatio(keepRatio: boolean) {\n        this.innerMoveable.setState({\n            keepRatio,\n        });\n    }\n    /**\n     * throttle of x, y when drag.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.throttleDrag = 1;\n     */\n    get throttleDrag(): number {\n        return this.getMoveable().props.throttleDrag;\n    }\n    set throttleDrag(throttleDrag: number) {\n        this.innerMoveable.setState({\n            throttleDrag,\n        });\n    }\n    /**\n     * throttle of width, height when resize.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.throttleResize = 1;\n     */\n    get throttleResize(): number {\n        return this.getMoveable().props.throttleResize;\n    }\n    set throttleResize(throttleResize: number) {\n        this.innerMoveable.setState({\n            throttleResize,\n        });\n    }\n    /**\n     * throttle of scaleX, scaleY when scale.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.throttleScale = 0.1;\n     */\n    get throttleScale(): number {\n        return this.getMoveable().props.throttleScale;\n    }\n    set throttleScale(throttleScale: number) {\n        this.innerMoveable.setState({\n            throttleScale,\n        });\n    }\n    /**\n     * hrottle of angle(degree) when rotate.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.throttleRotate = 1;\n     */\n    get throttleRotate(): number {\n        return this.getMoveable().props.throttleRotate;\n    }\n    set throttleRotate(throttleRotate: number) {\n        this.innerMoveable.setState({\n            throttleRotate,\n        });\n    }\n    /**\n     * Check if the target is an element included in the moveable.\n     * @param - the target\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"click\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *         moveable.target = e.target;\n     *     }\n     * });\n     */\n    public isMoveableElement(target: HTMLElement | SVGElement) {\n        return this.getMoveable().isMoveableElement(target);\n    }\n    /**\n     * If the width, height, left, and top of all elements change, update the shape of the moveable.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"resize\", e => {\n     *     moveable.updateRect();\n     * });\n     */\n    public updateRect() {\n        this.getMoveable().updateRect();\n    }\n    /**\n     * If the width, height, left, and top of the only target change, update the shape of the moveable.\n     * @param - the values of x and y to move moveable.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.updateTarget();\n     */\n    public updateTarget(): void {\n        this.getMoveable().updateTarget();\n    }\n    /**\n     * Remove the Moveable object and the events.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.destroy();\n     */\n    public destroy() {\n        const el = this.getMoveable().base;\n\n        el.remove ? el.remove() : el.parentElement.removeChild(el);\n        this.getMoveable().componentWillUnmount();\n        this.innerMoveable = null;\n    }\n    private getMoveable() {\n        return this.innerMoveable.preactMoveable;\n    }\n    private getMoveableProps() {\n        return this.getMoveable().props;\n    }\n    private onDragStart = (e: OnDragStart) => {\n        this.trigger(\"dragStart\", e);\n    }\n    private onDrag = (e: OnDrag) => {\n        this.trigger(\"drag\", e);\n    }\n    private onDragEnd = (e: OnDragEnd) => {\n        this.trigger(\"dragEnd\", e);\n    }\n    private onResizeStart = (e: OnResizeStart) => {\n        this.trigger(\"resizeStart\", e);\n    }\n    private onResize = (e: OnResize) => {\n        this.trigger(\"resize\", e);\n    }\n    private onResizeEnd = (e: OnResizeEnd) => {\n        this.trigger(\"resizeEnd\", e);\n    }\n    private onScaleStart = (e: OnScaleStart) => {\n        this.trigger(\"scaleStart\", e);\n    }\n    private onScale = (e: OnScale) => {\n        this.trigger(\"scale\", e);\n    }\n    private onScaleEnd = (e: OnScaleEnd) => {\n        this.trigger(\"scaleEnd\", e);\n    }\n    private onRotateStart = (e: OnRotateStart) => {\n        this.trigger(\"rotateStart\", e);\n    }\n    private onRotate = (e: OnRotate) => {\n        this.trigger(\"rotate\", e);\n    }\n    private onRotateEnd = (e: OnRotateEnd) => {\n        this.trigger(\"rotateEnd\", e);\n    }\n    private onWarpStart = (e: OnWarpStart) => {\n        this.trigger(\"warpStart\", e);\n    }\n    private onWarp = (e: OnWarp) => {\n        this.trigger(\"warp\", e);\n    }\n    private onWarpEnd = (e: OnWarpEnd) => {\n        this.trigger(\"warpEnd\", e);\n    }\n    private onPinchStart = (e: OnPinchStart) => {\n        this.trigger(\"pinchStart\", e);\n    }\n    private onPinch = (e: OnPinch) => {\n        this.trigger(\"pinch\", e);\n    }\n    private onPinchEnd = (e: OnPinchEnd) => {\n        this.trigger(\"pinchEnd\", e);\n    }\n}\n\n/**\n * When the drag starts, the dragStart event is called.\n * @memberof Moveable\n * @event dragStart\n * @param {Moveable.OnDragStart} - Parameters for the dragStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When dragging, the drag event is called.\n * @memberof Moveable\n * @event drag\n * @param {Moveable.OnDrag} - Parameters for the drag event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"drag\", ({ target, transform }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the drag finishes, the dragEnd event is called.\n * @memberof Moveable\n * @event dragEnd\n * @param {Moveable.OnDragEnd} - Parameters for the dragEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the resize starts, the resizeStart event is called.\n * @memberof Moveable\n * @event resizeStart\n * @param {Moveable.OnResizeStart} - Parameters for the resizeStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When resizing, the resize event is called.\n * @memberof Moveable\n * @event resize\n * @param {Moveable.OnResize} - Parameters for the resize event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resize\", ({ target, width, height }) => {\n *     target.style.width = `${e.width}px`;\n *     target.style.height = `${e.height}px`;\n * });\n */\n/**\n * When the resize finishes, the resizeEnd event is called.\n * @memberof Moveable\n * @event resizeEnd\n * @param {Moveable.OnResizeEnd} - Parameters for the resizeEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the scale starts, the scaleStart event is called.\n * @memberof Moveable\n * @event scaleStart\n * @param {Moveable.OnScaleStart} - Parameters for the scaleStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When scaling, the scale event is called.\n * @memberof Moveable\n * @event scale\n * @param {Moveable.OnScale} - Parameters for the scale event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the scale finishes, the scaleEnd event is called.\n * @memberof Moveable\n * @event scaleEnd\n * @param {Moveable.OnScaleEnd} - Parameters for the scaleEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the rotate starts, the rotateStart event is called.\n * @memberof Moveable\n * @event rotateStart\n * @param {Moveable.OnRotateStart} - Parameters for the rotateStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When rotating, the rotate event is called.\n * @memberof Moveable\n * @event rotate\n * @param {Moveable.OnRotate} - Parameters for the rotate event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotate\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the rotate finishes, the rotateEnd event is called.\n * @memberof Moveable\n * @event rotateEnd\n * @param {Moveable.OnRotateEnd} - Parameters for the rotateEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the warp starts, the warpStart event is called.\n* @memberof Moveable\n* @event warpStart\n* @param {Moveable.OnWarpStart} - Parameters for the warpStart event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, { warpable: true });\n* moveable.on(\"warpStart\", ({ target }) => {\n*     console.log(target);\n* });\n*/\n/**\n * When warping, the warp event is called.\n * @memberof Moveable\n * @event warp\n * @param {Moveable.OnWarp} - Parameters for the warp event\n * @example\n * import Moveable from \"moveable\";\n * let matrix = [\n *  1, 0, 0, 0,\n *  0, 1, 0, 0,\n *  0, 0, 1, 0,\n *  0, 0, 0, 1,\n * ];\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warp\", ({ target, transform, delta, multiply }) => {\n *    // target.style.transform = transform;\n *    matrix = multiply(matrix, delta);\n *    target.style.transform = `matrix3d(${matrix.join(\",\")})`;\n * });\n */\n/**\n * When the warp finishes, the warpEnd event is called.\n * @memberof Moveable\n * @event warpEnd\n * @param {Moveable.OnWarpEnd} - Parameters for the warpEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warpEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the pinch starts, the pinchStart event is called with part of scaleStart, rotateStart, resizeStart\n * @memberof Moveable\n * @event pinchStart\n * @param {Moveable.OnPinchStart} - Parameters for the pinchStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When pinching, the pinch event is called with part of scale, rotate, resize\n * @memberof Moveable\n * @event pinch\n * @param {Moveable.OnPinch} - Parameters for the pinch event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinch\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotate\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scale\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When the pinch finishes, the pinchEnd event is called.\n * @memberof Moveable\n * @event pinchEnd\n * @param {Moveable.OnPinchEnd} - Parameters for the pinchEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleEnd\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\nexport default Moveable;\n\ndeclare interface Moveable {\n    on(eventName: \"drag\", handlerToAttach: (event: OnDrag) => any): this;\n    on(eventName: \"dragStart\", handlerToAttach: (event: OnDragStart) => any): this;\n    on(eventName: \"dragEnd\", handlerToAttach: (event: OnDragEnd) => any): this;\n    on(eventName: \"resize\", handlerToAttach: (event: OnResize) => any): this;\n    on(eventName: \"resizeStart\", handlerToAttach: (event: OnResizeStart) => any): this;\n    on(eventName: \"resizeEnd\", handlerToAttach: (event: OnResizeEnd) => any): this;\n    on(eventName: \"scale\", handlerToAttach: (event: OnScale) => any): this;\n    on(eventName: \"scaleStart\", handlerToAttach: (event: OnScaleStart) => any): this;\n    on(eventName: \"scaleEnd\", handlerToAttach: (event: OnScaleEnd) => any): this;\n    on(eventName: \"rotate\", handlerToAttach: (event: OnRotate) => any): this;\n    on(eventName: \"rotateStart\", handlerToAttach: (event: OnRotateStart) => any): this;\n    on(eventName: \"rotateEnd\", handlerToAttach: (event: OnRotateEnd) => any): this;\n    on(eventName: \"warp\", handlerToAttach: (event: OnWarp) => any): this;\n    on(eventName: \"warpStart\", handlerToAttach: (event: OnWarpStart) => any): this;\n    on(eventName: \"warpEnd\", handlerToAttach: (event: OnWarpEnd) => any): this;\n    on(eventName: \"pinch\", handlerToAttach: (event: OnPinch) => any): this;\n    on(eventName: \"pinchStart\", handlerToAttach: (event: OnPinchStart) => any): this;\n    on(eventName: \"pinchEnd\", handlerToAttach: (event: OnPinchEnd) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n"],"names":["props","_super","_this","state","tslib_1","h","Moveable","ref","this","Component","parentElement","options","e","trigger","element","document","createElement","nextOptions","container","render","InnerMoveable","onDragStart","onDrag","onDragEnd","onResizeStart","onResize","onResizeEnd","onScaleStart","onScale","onScaleEnd","onRotateStart","onRotate","onRotateEnd","onWarpStart","onWarp","onWarpEnd","onPinchStart","onPinch","onPinchEnd","appendChild","children","Object","getMoveableProps","origin","innerMoveable","setState","target","updateRect","draggable","resizable","scalable","rotatable","warpable","pinchable","getMoveable","keepRatio","throttleDrag","throttleResize","throttleScale","throttleRotate","isMoveableElement","updateTarget","el","base","remove","removeChild","componentWillUnmount","preactMoveable","EgComponent"],"mappings":"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"}